{"version":3,"file":"ng2-adsk-forge-viewer.umd.min.js","sources":["../../out-tsc/lib/src/extensions/extension.ts","../../out-tsc/lib/src/extensions/basic-extension.ts","../../out-tsc/lib/src/service/script.service.ts","../../out-tsc/lib/src/component/viewer.component.ts","../../out-tsc/lib/src/component/thumbnail.component.ts","../../out-tsc/lib/src/module.ts"],"sourcesContent":["export abstract class ViewerEventArgs {\n  target?: Autodesk.Viewing.Viewer3D;\n  model?: Autodesk.Viewing.ViewerItem;\n  type: string;\n  [key: string]: any;\n}\nexport class AggregationSelectionChangedEventArgs extends ViewerEventArgs {\n  selections: Autodesk.Viewing.ViewerItem[];\n  type = Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT;\n}\nexport class AnimationReadyEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.ANIMATION_READY_EVENT;\n}\nexport class CameraChangedEventArgs extends ViewerEventArgs {\n  camera: THREE.Camera;\n  type = Autodesk.Viewing.CAMERA_CHANGE_EVENT;\n}\nexport class CutplanesChangedEventArgs extends ViewerEventArgs {\n  cutplanes: Object[];\n  type = Autodesk.Viewing.CUTPLANES_CHANGE_EVENT;\n}\nexport class EscapeEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.ESCAPE_EVENT;\n}\nexport class ExplodeChangedEventArgs extends ViewerEventArgs {\n  scale: number;\n  type = Autodesk.Viewing.EXPLODE_CHANGE_EVENT;\n}\nexport abstract class ExtensionLoadedUnloadedEventArgs extends ViewerEventArgs {\n  extensionId: string;\n}\nexport class ExtensionLoadedEventArgs extends ExtensionLoadedUnloadedEventArgs {\n  type = Autodesk.Viewing.EXTENSION_LOADED_EVENT;\n}\nexport class ExtensionUnloadedEventArgs extends ExtensionLoadedUnloadedEventArgs {\n  type = Autodesk.Viewing.EXTENSION_UNLOADED_EVENT;\n}\nexport class FinalFrameRenderedChangedEventArgs extends ViewerEventArgs {\n  planes: Object[];\n  type = Autodesk.Viewing.FINAL_FRAME_RENDERED_CHANGED_EVENT;\n}\nexport class FitToViewEventArgs extends ViewerEventArgs {\n  immediate: boolean;\n  nodeIdArray: number[];\n  type = Autodesk.Viewing.FIT_TO_VIEW_EVENT;\n}\nexport class FragmentsLoadedEventArgs extends ViewerEventArgs {\n  getFragIds: () => void;\n  data: Object;\n  type = Autodesk.Viewing.FRAGMENTS_LOADED_EVENT;\n}\nexport class FullscreenEventArgs extends ViewerEventArgs {\n  mode: Autodesk.Viewing.ScreenMode;\n  type = Autodesk.Viewing.FULLSCREEN_MODE_EVENT;\n}\nexport class GeometryLoadedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.GEOMETRY_LOADED_EVENT;\n}\nexport class HideEventArgs extends ViewerEventArgs {\n  nodeIdArray: number[];\n  type = Autodesk.Viewing.HIDE_EVENT;\n}\nexport class HyperlinkEventArgs extends ViewerEventArgs {\n  data: Object; // TODO: Can his be stronger?\n  type = Autodesk.Viewing.HYPERLINK_EVENT;\n}\nexport class IsolateEventArgs extends ViewerEventArgs {\n  nodeIdArray: number[];\n  type = Autodesk.Viewing.ISOLATE_EVENT;\n}\nexport class LayerVisibilityEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.LAYER_VISIBILITY_CHANGED_EVENT;\n}\nexport class LoadMissingGeometryEventArgs extends ViewerEventArgs {\n  delay: boolean;\n  type = Autodesk.Viewing.LOAD_MISSING_GEOMETRY;\n}\nexport class ModelRootLoadedEventArgs extends ViewerEventArgs {\n  svf: Object; // TODO: can this be stronger\n  type = Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT;\n}\nexport class ModelUnloadedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.MODEL_UNLOADED_EVENT;\n}\nexport class NavigationModeChangedEventArgs extends ViewerEventArgs {\n  id: string;\n  type = Autodesk.Viewing.NAVIGATION_MODE_CHANGED_EVENT;\n}\nexport abstract class ObjectTreeEventArgs extends ViewerEventArgs {\n  svf: Object; // TODO: can this be stronger\n}\nexport class ObjectTreeCreatedEventArgs extends ObjectTreeEventArgs {\n  type = Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT;\n}\nexport class ObjectTreeUnavailableEventArgs extends ObjectTreeEventArgs {\n  type = Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT;\n}\nexport abstract class PrefEventArgs extends ViewerEventArgs {\n  name: string;\n  value: Object;\n}\nexport class PrefChangedEventArgs extends PrefEventArgs {\n  type = Autodesk.Viewing.PREF_CHANGED_EVENT;\n}\nexport class PrefResetEventArgs extends PrefEventArgs {\n  type = Autodesk.Viewing.PREF_RESET_EVENT;\n}\nexport class ProgressUpdateEventArgs extends ViewerEventArgs {\n  percent: number;\n  state: Autodesk.Viewing.ProgressState;\n  type = Autodesk.Viewing.PROGRESS_UPDATE_EVENT;\n}\nexport class RenderOptionChangedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT;\n}\nexport class RenderPresentedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.RENDER_PRESENTED_EVENT;\n}\nexport class ResetEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.RESET_EVENT;\n}\nexport class RestoreDefaultSettingsEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.RESTORE_DEFAULT_SETTINGS_EVENT;\n}\nexport class SelectionChangedEventArgs extends ViewerEventArgs {\n  fragIdsArray: number[];\n  dbIdArray: number[];\n  nodeArray: number[];\n  type = Autodesk.Viewing.SELECTION_CHANGED_EVENT;\n}\nexport class ShowEventArgs extends ViewerEventArgs {\n  nodeArrayId: number[];\n  type = Autodesk.Viewing.SHOW_EVENT;\n}\nexport class TexturesLoadedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.TEXTURES_LOADED_EVENT;\n}\nexport class ToolChangedEventArgs extends ViewerEventArgs {\n  toolName: string;\n  tool: Object;\n  active: boolean;\n  type = Autodesk.Viewing.TOOL_CHANGE_EVENT;\n}\nexport class ViewerInitializedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.VIEWER_INITIALIZED;\n}\nexport class ViewerResizeEventArgs extends ViewerEventArgs {\n  width: number;\n  height: number;\n  type = Autodesk.Viewing.VIEWER_RESIZE_EVENT;\n}\nexport class ViewerStateRestoredEventArgs extends ViewerEventArgs {\n  value: boolean;\n  type = Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT;\n}\nexport class ViewerUnInitializedEventArgs extends ViewerEventArgs {\n  type = Autodesk.Viewing.VIEWER_UNINITIALIZED;\n}\n\n/**\n * Base extension that all other extensions can inherit from\n */\nexport abstract class Extension {\n  public static extensionName: string = '';\n\n  protected viewer: Autodesk.Viewing.Viewer3D = undefined;\n  protected extOptions: Autodesk.Viewing.ExtensionOptions = undefined;\n\n  protected eventArgsTypeMap: { [key: string]: Function } = {};\n\n  public static registerExtension(extensionName: string, extension: Object) {\n    Autodesk.Viewing.theExtensionManager.registerExtension(extensionName, extension);\n  }\n\n  public static unregisterExtension(extensionName: string) {\n    Autodesk.Viewing.theExtensionManager.unregisterExtension(extensionName);\n  }\n\n  constructor(viewer: Autodesk.Viewing.Viewer3D,\n              options?: Autodesk.Viewing.ExtensionOptions) {\n    this.viewer = viewer;\n    this.extOptions = options;\n\n    this.registerEventTypes();\n  }\n\n  /** Called by Autodesk extension manager when extension is loaded */\n  public abstract load(): void;\n  /** Called by Autodesk extension manager when extension is unloaded */\n  public abstract unload(): void;\n\n  /** Register event args types that we will cast to 'proper' objects */\n  protected registerEventTypes() {\n    // tslint:disable:max-line-length\n    this.eventArgsTypeMap[Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT] = AggregationSelectionChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.ANIMATION_READY_EVENT] = AnimationReadyEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.CAMERA_CHANGE_EVENT] = CameraChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.CUTPLANES_CHANGE_EVENT] = CutplanesChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.ESCAPE_EVENT] = EscapeEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.EXPLODE_CHANGE_EVENT] = ExplodeChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.EXTENSION_LOADED_EVENT] = ExtensionLoadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.EXTENSION_UNLOADED_EVENT] = ExtensionUnloadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.FINAL_FRAME_RENDERED_CHANGED_EVENT] = FinalFrameRenderedChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.FIT_TO_VIEW_EVENT] = FitToViewEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.FRAGMENTS_LOADED_EVENT] = FragmentsLoadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.FULLSCREEN_MODE_EVENT] = FullscreenEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.GEOMETRY_LOADED_EVENT] = GeometryLoadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.HIDE_EVENT] = HideEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.HYPERLINK_EVENT] = HyperlinkEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.ISOLATE_EVENT] = IsolateEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.LAYER_VISIBILITY_CHANGED_EVENT] = LayerVisibilityEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.LOAD_MISSING_GEOMETRY] = LoadMissingGeometryEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT] = ModelRootLoadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.MODEL_UNLOADED_EVENT] = ModelUnloadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.NAVIGATION_MODE_CHANGED_EVENT] = NavigationModeChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT] = ObjectTreeCreatedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT] = ObjectTreeUnavailableEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.PREF_CHANGED_EVENT] = PrefChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.PREF_RESET_EVENT] = PrefResetEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.PROGRESS_UPDATE_EVENT] = ProgressUpdateEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT] = RenderOptionChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.RENDER_PRESENTED_EVENT] = RenderPresentedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.RESET_EVENT] = ResetEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.RESTORE_DEFAULT_SETTINGS_EVENT] = RestoreDefaultSettingsEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.SELECTION_CHANGED_EVENT] = SelectionChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.SHOW_EVENT] = ShowEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.TEXTURES_LOADED_EVENT] = TexturesLoadedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.TOOL_CHANGE_EVENT] = ToolChangedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_INITIALIZED] = ViewerInitializedEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_RESIZE_EVENT] = ViewerResizeEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT] = ViewerStateRestoredEventArgs;\n    this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_UNINITIALIZED] = ViewerUnInitializedEventArgs;\n    // tslint:enable:max-line-length\n  }\n\n  /** Cast Viewer event args to class */\n  protected castArgs(args: any): any {\n    if (Array.isArray(args)) {\n      return args.map(this.castArgs);\n    }\n\n    if (!args || typeof args !== 'object' || !args.hasOwnProperty('type')) {\n      // Can't cast this object\n      return args;\n    }\n\n    // Create new object of appropriate type\n    const clazz = this.eventArgsTypeMap[args.type];\n    const typedItem = Object.create(clazz.prototype);\n\n    // Cast any properties\n    for (const k of Object.keys(args)) {\n      typedItem[k] = this.castArgs(args[k]);\n    }\n\n    return typedItem;\n  }\n}\n","import { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport 'rxjs/add/operator/map';\n\nimport { Extension, ViewerEventArgs } from './extension';\n\nexport class BasicExtension extends Extension {\n  public static extensionName: string = 'BasicExtension';\n  public static debugMessages: boolean = false;\n\n  private static callback: (ext: BasicExtension) => void = null;\n\n  public viewerEvents: Observable<ViewerEventArgs>;\n  protected eventStreams: Observable<ViewerEventArgs>[] = [];\n\n  protected readonly events: string[] = [\n    Autodesk.Viewing.FIT_TO_VIEW_EVENT,\n    Autodesk.Viewing.FULLSCREEN_MODE_EVENT,\n    Autodesk.Viewing.GEOMETRY_LOADED_EVENT,\n    Autodesk.Viewing.HIDE_EVENT,\n    Autodesk.Viewing.ISOLATE_EVENT,\n    Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,\n    Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT,\n    Autodesk.Viewing.RESET_EVENT,\n    Autodesk.Viewing.SELECTION_CHANGED_EVENT,\n    Autodesk.Viewing.SHOW_EVENT,\n  ];\n\n  public static registerExtension(extensionName: string, callback: (ext: BasicExtension) => void) {\n    BasicExtension.callback = callback;\n    super.registerExtension(BasicExtension.extensionName, BasicExtension);\n  }\n\n  public load() {\n    this.events.forEach((eventName) => {\n      const obs = fromEvent(this.viewer, eventName).map(args => this.castArgs(args));\n      this.eventStreams.push(obs);\n    });\n\n    this.viewerEvents = merge(...this.eventStreams);\n\n    if (BasicExtension.debugMessages) console.log(BasicExtension.extensionName, 'loaded!');\n    if (BasicExtension.callback) BasicExtension.callback(this);\n    return true;\n  }\n\n  public unload() {\n    this.eventStreams = [];\n    this.viewerEvents = undefined;\n\n    if (BasicExtension.debugMessages) console.log(BasicExtension.extensionName, 'unloaded!');\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\n\ndeclare var document: any;\n\nexport interface ScriptInfoLookup {\n  [key: string]: ScriptInfo;\n}\n\nexport interface ScriptInfo {\n  src: string;\n  loaded: boolean;\n  status?: string;\n}\n\n@Injectable()\nexport class ScriptService {\n\n  private scripts: ScriptInfoLookup = {};\n\n  constructor() {\n    // Nothing to do\n  }\n\n  public load(...urls: string[]): Promise<ScriptInfo[]> {\n    const promises: Promise<ScriptInfo>[] = [];\n\n    urls.forEach((src) => {\n      if (this.scripts[src] && this.scripts[src].loaded) {\n        return;\n      }\n\n      this.scripts[src] = { src, loaded: false };\n      return promises.push(this.loadScript(src));\n    });\n\n    return Promise.all(promises);\n  }\n\n  public loadScript(name: string): Promise<ScriptInfo> {\n    return new Promise((resolve, reject) => {\n      // resolve if already loaded\n      if (this.scripts[name] && this.scripts[name].loaded) {\n        resolve({ src: name, loaded: true, status: 'Already Loaded' });\n        return;\n      }\n\n      // load script\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = this.scripts[name].src;\n\n      if (script.readyState) {  // IE\n        script.onreadystatechange = () => {\n          if (script.readyState === 'loaded' || script.readyState === 'complete') {\n            script.onreadystatechange = null;\n            this.scripts[name].loaded = true;\n\n            resolve({ src: name, loaded: true, status: 'Loaded' });\n          }\n        };\n      } else {  // Others\n        script.onload = () => {\n          this.scripts[name].loaded = true;\n\n          resolve({ src: name, loaded: true, status: 'Loaded' });\n        };\n      }\n\n      script.onerror = (error: any) => resolve({ src: name, loaded: false, status: 'Loaded' });\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n}\n","/// <reference types=\"three\" />\n/// <reference path=\"viewer-typings.d.ts\" />\n\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy,\n  Output } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/takeUntil';\n\nimport { ScriptService } from '../service/script.service';\nimport {\n  FitToViewEventArgs,\n  FullscreenEventArgs,\n  GeometryLoadedEventArgs,\n  HideEventArgs,\n  IsolateEventArgs,\n  ObjectTreeCreatedEventArgs,\n  ObjectTreeUnavailableEventArgs, ResetEventArgs,\n  SelectionChangedEventArgs,\n  ShowEventArgs,\n  ViewerEventArgs,\n} from '../extensions/extension';\nimport { BasicExtension } from '../extensions/basic-extension';\n\nexport interface DocumentChangedEvent {\n  document: Autodesk.Viewing.Document;\n  viewingApplication: Autodesk.Viewing.ViewingApplication;\n  viewerComponent: ViewerComponent;\n}\n\nexport interface ItemLoadedEvent {\n  item: Autodesk.Viewing.ViewerItem;\n  viewingApplication: Autodesk.Viewing.ViewingApplication;\n  currentViewer: Autodesk.Viewing.Viewer3D;\n  viewerComponent: ViewerComponent;\n}\n\nexport interface ViewingApplicationInitializedEvent {\n  viewingApplication: Autodesk.Viewing.ViewingApplication;\n  viewerComponent: ViewerComponent;\n}\n\nexport interface ViewerOptions {\n  initializerOptions: Autodesk.Viewing.InitializerOptions;\n  viewerApplicationOptions?: Autodesk.Viewing.ViewingApplicationOptions;\n  viewerConfig?: Autodesk.Viewing.ViewerConfig;\n  headlessViewer?: boolean;\n  showFirstViewable?: boolean;\n  onViewerScriptsLoaded?: () => void;\n  onViewingApplicationInitialized: (args: ViewingApplicationInitializedEvent) => void;\n}\n\n\n@Component({\n  selector: 'adsk-forge-viewer',\n  template: \"<div id=\\\"ng2-adsk-forge-viewer-container\\\"></div> \",\n  styles: [\"@import url('https://developer.api.autodesk.com/modelderivative/v2/viewers/style.min.css?v=6.5.*'); \"],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ViewerComponent implements OnDestroy {\n  readonly containerId = 'ng2-adsk-forge-viewer-container';\n\n  @Output() public onDocumentChanged = new EventEmitter<DocumentChangedEvent>();\n  @Output() public onItemLoaded = new EventEmitter<ItemLoadedEvent>();\n  @Output() public onError = new EventEmitter<Autodesk.Viewing.ErrorCodes>();\n\n  // Viewer events\n  @Output() public onFitToView = new EventEmitter<FitToViewEventArgs>();\n  @Output() public onFullscreen = new EventEmitter<FullscreenEventArgs>();\n  @Output() public onGeometryLoaded = new EventEmitter<GeometryLoadedEventArgs>();\n  @Output() public onHide = new EventEmitter<HideEventArgs>();\n  @Output() public onIsolate = new EventEmitter<IsolateEventArgs>();\n  @Output() public onObjectTreeCreated = new EventEmitter<ObjectTreeCreatedEventArgs>();\n  @Output() public onObjectTreeUnavailable = new EventEmitter<ObjectTreeUnavailableEventArgs>();\n  @Output() public onReset = new EventEmitter<ResetEventArgs>();\n  @Output() public onSelectionChanged = new EventEmitter<SelectionChangedEventArgs>();\n  @Output() public onShow = new EventEmitter<ShowEventArgs>();\n\n  // Debugging\n  @Input() public showDebugMessages: boolean = false;\n\n  private _viewerOptions: ViewerOptions = null;\n  private viewerInitialized = false;\n  private viewerApp: Autodesk.Viewing.ViewingApplication;\n  private documentId: string;\n  private unsubscribe: Subject<boolean> = new Subject();\n  private basicExt: BasicExtension;\n\n  /**\n   * Helper to allow callers to specify documentId with or without the required urn: prefix\n   */\n  private static verifyUrn(documentId: string): string {\n    return (documentId.startsWith('urn:')) ? documentId : `urn:${documentId}`;\n  }\n\n  constructor(private script: ScriptService) { }\n\n  @Input() public set viewerOptions(options: ViewerOptions) {\n    if (!this.viewerInitialized && options) {\n      this._viewerOptions = options;\n      void this.initialiseApplication();\n    }\n  }\n\n  public get viewerOptions() {\n    return this._viewerOptions;\n  }\n\n  ngOnDestroy() {\n    this.unregisterBasicExtension();\n\n    if (this.viewerApp) {\n      const viewer = this.viewerApp.getCurrentViewer();\n      if (viewer) {\n        viewer.tearDown();\n        viewer.uninitialize();\n      }\n    }\n\n    this.viewerApp = null;\n    this.viewerInitialized = false;\n\n    this.unsubscribe.next();\n    this.unsubscribe.complete();\n  }\n\n  /**\n   * Helper method to get some default viewer options\n   */\n  public getDefaultViewerOptions(\n    onViewingApplicationInitialized: (args: ViewingApplicationInitializedEvent) => void,\n    getAccessToken: (onGetAccessToken: (token: string, expire: number) => void) => void,\n  ): ViewerOptions {\n    return {\n      initializerOptions: {\n        env: 'AutodeskProduction',\n        getAccessToken,\n      },\n      onViewingApplicationInitialized,\n    };\n  }\n\n  /**\n   * Get a reference to the current viewing application\n   */\n  public get ViewerApplication() {\n    return this.viewerApp;\n  }\n\n  /**\n   * Get a reference to the current 3D viewer\n   */\n  public get Viewer3D() {\n    return this.viewerApp.getCurrentViewer();\n  }\n\n  /**\n   * Get the document urn that has been loaded\n   */\n  public get DocumentId() {\n    return this.documentId;\n  }\n\n  /**\n   * Set the document urn, which triggers the viewer to load the document\n   */\n  public set DocumentId(value: string) {\n    this.documentId = value;\n    this.loadDocument(this.documentId);\n  }\n\n  public get basicExtension() {\n    return this.basicExt;\n  }\n\n  public get extensionEvents(): Observable<ViewerEventArgs> | null {\n    if (this.basicExt) {\n      return this.basicExt.viewerEvents;\n    }\n  }\n\n  public selectItem(item: Autodesk.Viewing.ViewerItem|Autodesk.Viewing.BubbleNode) {\n    this.viewerApp.selectItem(item, this.onItemLoadSuccess.bind(this), this.onItemLoadFail.bind(this));\n  }\n\n  /**\n   * We don't bundle Autodesk's scripts with the component, and we don't really want users to have\n   * to add the scripts to their index.html pages. So we'll load them when required.\n   */\n  private loadScripts(): Promise<void> {\n    return this.script.load(\n      'https://developer.api.autodesk.com/modelderivative/v2/viewers/viewer3D.min.js?v=6.5.*',\n    )\n      .then((data) => {\n        this.log('script loaded ', data);\n      })\n      .catch(error => this.error(error));\n  }\n\n  /**\n   * Initialises a ViewingApplication\n   */\n  private async initialiseApplication() {\n    // Load scripts first\n    await this.loadScripts();\n    if (this.viewerOptions.onViewerScriptsLoaded) this.viewerOptions.onViewerScriptsLoaded();\n\n    // Check if the viewer has already been initialised - this isn't the nicest, but we've set the env in our\n    // options above so we at least know that it was us who did this!\n    if (!Autodesk.Viewing.Private.env) {\n      Autodesk.Viewing.Initializer(this.viewerOptions.initializerOptions, () => {\n        this.initialized();\n      });\n    } else {\n      // We need to give an initialised viewing application a tick to allow the DOM element\n      // to be established before we re-draw\n      setTimeout(() => {\n        this.initialized();\n      });\n    }\n  }\n\n  private initialized() {\n    this.viewerApp = new Autodesk.Viewing.ViewingApplication(this.containerId,\n                                                             this.viewerOptions.viewerApplicationOptions);\n\n    // Register an extension to help us raise events\n    const extName = this.registerBasicExtension();\n    const config = this.addBasicExtensionConfig(extName);\n\n    // Register a viewer with the application (passign through any additional config)\n    this.viewerApp.registerViewer(\n      this.viewerApp.k3D,\n      (this.viewerOptions.headlessViewer) ? Autodesk.Viewing.Viewer3D : Autodesk.Viewing.Private.GuiViewer3D,\n      config,\n    );\n\n    // Viewer is ready - scripts are loaded and we've create a new viewing application\n    this.viewerInitialized = true;\n    this.viewerOptions.onViewingApplicationInitialized({ viewingApplication: this.viewerApp, viewerComponent: this });\n  }\n\n  /**\n   * Loads a model in to the viewer via it's urn\n   */\n  private loadDocument(documentId: string) {\n    if (!documentId) {\n      return;\n    }\n\n    // Add urn: to the beginning of document id if needed\n    this.viewerApp.loadDocument(ViewerComponent.verifyUrn(documentId),\n                                this.onDocumentLoadSuccess.bind(this),\n                                this.onDocumentLoadFailure.bind(this));\n  }\n\n  /**\n   * Document successfully loaded\n   */\n  private onDocumentLoadSuccess(document: Autodesk.Viewing.Document) {\n    if (!this.viewerApp.bubble) return;\n\n    // Emit an event so the caller can do something\n    // TODO: config option to specify which viewable to display (how?)\n    this.onDocumentChanged.emit({ document, viewingApplication: this.viewerApp, viewerComponent: this });\n\n    if (this.viewerOptions.showFirstViewable === undefined || this.viewerOptions.showFirstViewable) {\n      // This will be the default behaviour -- show the first viewable\n      // We could still make use of Document.getSubItemsWithProperties()\n      // However, when using a ViewingApplication, we have access to the **bubble** attribute,\n      // which references the root node of a graph that wraps each object from the Manifest JSON.\n      const viewables = this.viewerApp.bubble.search(Autodesk.Viewing.BubbleNode.MODEL_NODE);\n\n      if (viewables && viewables.length > 0) {\n        this.viewerApp.selectItem(viewables[0].data, this.onItemLoadSuccess.bind(this), this.onItemLoadFail.bind(this));\n      }\n    }\n  }\n\n  /**\n   * Failed to load document\n   */\n  private onDocumentLoadFailure(errorCode: Autodesk.Viewing.ErrorCodes) {\n    this.error('onDocumentLoadFailure() - errorCode:' + errorCode);\n    this.onError.emit(errorCode);\n  }\n\n  /**\n   * View from the document was successfully loaded\n   */\n  private onItemLoadSuccess(viewer: Autodesk.Viewing.Viewer3D, item: Autodesk.Viewing.ViewerItem) {\n    this.log('onItemLoadSuccess()', viewer, item);\n\n    this.onItemLoaded.emit({\n      item,\n      currentViewer: viewer,\n      viewingApplication: this.viewerApp,\n      viewerComponent: this,\n    });\n  }\n\n  /**\n   * Failed to load a view from the document\n   */\n  private onItemLoadFail(errorCode: Autodesk.Viewing.ErrorCodes) {\n    this.error('onItemLoadFail() - errorCode:' + errorCode);\n    this.onError.emit(errorCode);\n  }\n\n  /**\n   * Register our BasicExtension with the Forge Viewer\n   */\n  private registerBasicExtension(): string {\n    BasicExtension.registerExtension(BasicExtension.extensionName, this.extensionLoaded.bind(this));\n    return BasicExtension.extensionName;\n  }\n\n  /**\n   * Subscript to BasicExtension events when the extension has been\n   * succesfully loaded by the viewer.\n   */\n  private extensionLoaded(ext: BasicExtension) {\n    this.basicExt = ext;\n    ext.viewerEvents\n      .takeUntil(this.unsubscribe)\n      .subscribe((item: ViewerEventArgs) => {\n        this.log(item);\n\n        if (item instanceof FitToViewEventArgs) {\n          this.onFitToView.emit(item);\n        } else if (item instanceof FullscreenEventArgs) {\n          this.onFullscreen.emit(item);\n        } else if (item instanceof GeometryLoadedEventArgs) {\n          this.onGeometryLoaded.emit(item);\n        } else if (item instanceof HideEventArgs) {\n          this.onHide.emit(item);\n        } else if (item instanceof IsolateEventArgs) {\n          this.onIsolate.emit(item);\n        } else if (item instanceof ObjectTreeCreatedEventArgs) {\n          this.onObjectTreeCreated.emit(item);\n        } else if (item instanceof ObjectTreeUnavailableEventArgs) {\n          this.onObjectTreeUnavailable.emit(item);\n        } else if (item instanceof ResetEventArgs) {\n          this.onReset.emit(item);\n        } else if (item instanceof SelectionChangedEventArgs) {\n          this.onSelectionChanged.emit(item);\n        } else if (item instanceof ShowEventArgs) {\n          this.onShow.emit(item);\n        }\n      });\n  }\n\n  private unregisterBasicExtension() {\n    BasicExtension.unregisterExtension(BasicExtension.extensionName);\n    this.basicExt = null;\n  }\n\n  /**\n   * Add list of extensions to the viewer config that has been provided\n   * The allows the user to register their own extensions.\n   */\n  private addBasicExtensionConfig(extName: string): Autodesk.Viewing.ViewerConfig {\n    const config: Autodesk.Viewing.ViewerConfig = Object.assign(\n      {},\n      this.viewerOptions.viewerConfig,\n      { extensions: [] },\n    );\n\n    // We will always load our basic extension with any others specified by the caller\n    if (this.viewerOptions.viewerConfig && this.viewerOptions.viewerConfig.extensions) {\n      config.extensions = [...this.viewerOptions.viewerConfig.extensions, extName];\n    } else {\n      config.extensions = [extName];\n    }\n\n    return config;\n  }\n\n  private log(message?: any, ...optionalParams: any[]) {\n    if (!this.showDebugMessages) return;\n    console.log(message, optionalParams);\n  }\n\n  private error(message?: any, ...optionalParams: any[]) {\n    if (!this.showDebugMessages) return;\n    console.error(message, optionalParams);\n  }\n}\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\n\nexport interface ThumbnailOptions {\n  getAccessToken?: (onGetAccessToken: (token: string, expire: number) => void) => void;\n  documentId: string;\n  width?: 100|200|400;\n  height?: 100|200|400;\n  defaultImageSrc?: string;\n}\n\n@Component({\n  selector: 'adsk-forge-thumbnail',\n  template: \"<img [src]=\\\"imageSrc\\\" /> \",\n})\nexport class ThumbnailComponent implements OnChanges {\n  @Input() public thumbnailOptions: ThumbnailOptions;\n  public imageSrc: SafeUrl;\n\n  private token: string;\n  private expire: number;\n\n  constructor(\n    private http: HttpClient,\n    private sanitizer: DomSanitizer,\n  ) { }\n\n  public ngOnChanges() {\n    if (this.thumbnailOptions) {\n      this.setImageSrc(this.thumbnailOptions.defaultImageSrc);\n      this.getThumbnail(this.thumbnailOptions.documentId);\n    }\n  }\n\n  private getThumbnail(documentId: string) {\n    let url = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${documentId}/thumbnail`;\n\n    let opts: string = '';\n    if (this.thumbnailOptions.width) opts += `width=${this.thumbnailOptions.width}&`;\n    if (this.thumbnailOptions.height) opts += `height=${this.thumbnailOptions.height}&`;\n    if (opts) url += `?${opts.slice(0, -1)}`;\n\n    this.thumbnailOptions.getAccessToken(this.setAccessToken.bind(this));\n    const headers = {\n      Authorization: `Bearer ${this.token}`,\n      'Content-Type': 'image/png',\n    };\n\n    this.http.get(url, { headers, responseType: 'arraybuffer' })\n      .subscribe(\n        data => (data) ? this.setImageSrc(`data:image/png;base64,${this.toBase64(data)}`)\n          : this.setImageSrc(),\n        error => this.setImageSrc(),\n      );\n  }\n\n  private setAccessToken(accessToken: string, expiryTime: number) {\n    this.token = accessToken;\n    this.expire = expiryTime;\n  }\n\n  private toBase64(data: ArrayBuffer) {\n    return btoa(String.fromCharCode(...new Uint8Array(data) as any));\n  }\n\n  private setImageSrc(src: string = '') {\n    let imageSrc = '';\n\n    if (src) {\n      imageSrc = src;\n    } else {\n      imageSrc = (this.thumbnailOptions && this.thumbnailOptions.defaultImageSrc) || '';\n    }\n\n    this.imageSrc = this.sanitizer.bypassSecurityTrustUrl(imageSrc);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { ViewerComponent } from './component/viewer.component';\nimport { ThumbnailComponent } from './component/thumbnail.component';\nimport { ScriptService } from './service/script.service';\n\n@NgModule({\n  declarations: [ViewerComponent, ThumbnailComponent],\n  imports: [HttpClientModule],\n  exports: [ViewerComponent, ThumbnailComponent],\n  providers: [ScriptService],\n})\nexport class ViewerModule { }\n"],"names":["ViewerEventArgs","AggregationSelectionChangedEventArgs","Autodesk","Viewing","AGGREGATE_SELECTION_CHANGED_EVENT","__extends","AnimationReadyEventArgs","ANIMATION_READY_EVENT","CameraChangedEventArgs","CAMERA_CHANGE_EVENT","CutplanesChangedEventArgs","CUTPLANES_CHANGE_EVENT","EscapeEventArgs","ESCAPE_EVENT","ExplodeChangedEventArgs","EXPLODE_CHANGE_EVENT","ExtensionLoadedUnloadedEventArgs","ExtensionLoadedEventArgs","EXTENSION_LOADED_EVENT","ExtensionUnloadedEventArgs","EXTENSION_UNLOADED_EVENT","FinalFrameRenderedChangedEventArgs","FINAL_FRAME_RENDERED_CHANGED_EVENT","FitToViewEventArgs","FIT_TO_VIEW_EVENT","FragmentsLoadedEventArgs","FRAGMENTS_LOADED_EVENT","FullscreenEventArgs","FULLSCREEN_MODE_EVENT","GeometryLoadedEventArgs","GEOMETRY_LOADED_EVENT","HideEventArgs","HIDE_EVENT","HyperlinkEventArgs","HYPERLINK_EVENT","IsolateEventArgs","ISOLATE_EVENT","LayerVisibilityEventArgs","LAYER_VISIBILITY_CHANGED_EVENT","LoadMissingGeometryEventArgs","LOAD_MISSING_GEOMETRY","ModelRootLoadedEventArgs","MODEL_ROOT_LOADED_EVENT","ModelUnloadedEventArgs","MODEL_UNLOADED_EVENT","NavigationModeChangedEventArgs","NAVIGATION_MODE_CHANGED_EVENT","ObjectTreeEventArgs","ObjectTreeCreatedEventArgs","OBJECT_TREE_CREATED_EVENT","ObjectTreeUnavailableEventArgs","OBJECT_TREE_UNAVAILABLE_EVENT","PrefEventArgs","PrefChangedEventArgs","PREF_CHANGED_EVENT","PrefResetEventArgs","PREF_RESET_EVENT","ProgressUpdateEventArgs","PROGRESS_UPDATE_EVENT","RenderOptionChangedEventArgs","RENDER_OPTION_CHANGED_EVENT","RenderPresentedEventArgs","RENDER_PRESENTED_EVENT","ResetEventArgs","RESET_EVENT","RestoreDefaultSettingsEventArgs","RESTORE_DEFAULT_SETTINGS_EVENT","SelectionChangedEventArgs","SELECTION_CHANGED_EVENT","ShowEventArgs","SHOW_EVENT","TexturesLoadedEventArgs","TEXTURES_LOADED_EVENT","ToolChangedEventArgs","TOOL_CHANGE_EVENT","ViewerInitializedEventArgs","VIEWER_INITIALIZED","ViewerResizeEventArgs","VIEWER_RESIZE_EVENT","ViewerStateRestoredEventArgs","VIEWER_STATE_RESTORED_EVENT","ViewerUnInitializedEventArgs","VIEWER_UNINITIALIZED","viewer","options","undefined","this","extOptions","registerEventTypes","Extension","extensionName","extension","theExtensionManager","registerExtension","unregisterExtension","eventArgsTypeMap","args","Array","isArray","map","castArgs","hasOwnProperty","clazz","type","typedItem","Object","create","prototype","_a","keys","_i","k","BasicExtension","callback","_super","events","forEach","eventName","obs","fromEvent","_this","eventStreams","push","viewerEvents","merge","debugMessages","console","log","ScriptService","urls","promises","src","scripts","loaded","loadScript","Promise","all","name","resolve","reject","status","script","document","createElement","readyState","onreadystatechange","onload","onerror","error","getElementsByTagName","appendChild","Injectable","EventEmitter","Subject","ViewerComponent","documentId","startsWith","_viewerOptions","viewerInitialized","initialiseApplication","unregisterBasicExtension","viewerApp","getCurrentViewer","tearDown","uninitialize","unsubscribe","next","complete","onViewingApplicationInitialized","getAccessToken","initializerOptions","env","value","loadDocument","basicExt","item","selectItem","onItemLoadSuccess","bind","onItemLoadFail","load","then","data","catch","loadScripts","viewerOptions","onViewerScriptsLoaded","Private","setTimeout","initialized","Initializer","ViewingApplication","containerId","viewerApplicationOptions","extName","registerBasicExtension","config","addBasicExtensionConfig","registerViewer","k3D","Viewer3D","GuiViewer3D","viewingApplication","viewerComponent","verifyUrn","onDocumentLoadSuccess","onDocumentLoadFailure","bubble","onDocumentChanged","emit","showFirstViewable","viewables","search","BubbleNode","MODEL_NODE","length","errorCode","onError","onItemLoaded","currentViewer","extensionLoaded","ext","takeUntil","subscribe","onFitToView","onFullscreen","onGeometryLoaded","onHide","onIsolate","onObjectTreeCreated","onObjectTreeUnavailable","onReset","onSelectionChanged","onShow","assign","viewerConfig","extensions","message","optionalParams","showDebugMessages","Component","selector","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","Output","Input","http","sanitizer","ThumbnailComponent","thumbnailOptions","setImageSrc","defaultImageSrc","getThumbnail","url","opts","width","height","slice","setAccessToken","headers","Authorization","token","Content-Type","get","responseType","toBase64","accessToken","expiryTime","expire","btoa","String","fromCharCode","Uint8Array","imageSrc","bypassSecurityTrustUrl","HttpClient","DomSanitizer","NgModule","declarations","imports","HttpClientModule","exports","providers"],"mappings":"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"}